---
version: 2.1
commands:
  usecommondocker:
    description: "Make built common docker available"
    steps:
      - run:
          name: Upgrade pip
          command: pip3 install -U pip
      - run:
          name: Install dependencies
          command: pip3 install requests docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived common docker image
          command: |
            docker load -i /tmp/workspace/dsa_common.tar
  usecommon5docker:
    description: "Make built common docker available"
    steps:
      - run:
          name: Upgrade pip
          command: pip3 install -U pip
      - run:
          name: Install dependencies
          command: pip3 install requests docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived common docker image
          command: |
            docker load -i /tmp/workspace/dsa_common_5.tar
  startcommon:
    description: Start containers for tests.
    steps:
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose up -d'
          working_directory: ./devops/dsa
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
  startcommon5:
    description: Start containers for tests.
    steps:
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose up -d'
          working_directory: ./devops/ver5
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
jobs:
  test-cli-common:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommondocker
      - startcommon
      - run:
          name: Run a cli test
          command: docker exec dsa-girder-1 bash -c "python /opt/digital_slide_archive/devops/dsa/utils/cli_test.py dsarchive/histomicstk:latest --test --username=admin --password=password"
  test-cli-common-5:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommon5docker
      - startcommon5
      - run:
          name: Run a cli test
          command: docker exec ver5-girder-1 bash -c "python /opt/digital_slide_archive/devops/dsa/utils/cli_test.py dsarchive/histomicstk:latest --test --username=admin --password=password"
  test-proxy-common:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommondocker
      - run:
          name: Install nginx
          command: |
            sudo apt-get update
            sudo apt-get install -y nginx
      - run:
          name: Start nginx
          command: |
            sudo cp .circleci/dsa_proxy.nginx /etc/nginx/sites-available/default
            sudo service nginx restart
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose -f docker-compose.yml -f ../../.circleci/docker-compose.proxy.yml up -d'
          working_directory: ./devops/dsa
      - run:
          name: "Wait for girder to be available"
          command: |
            for f in `seq 120`; do curl --silent 'http://127.0.0.1/dsa/api/v1/system/version' | tac | tac | grep -q 'release' && break; sleep 1; done
      - run:
          name: "Check that we can read from the api and static assets in the proxy path locations"
          # grep -q will close its connection as soon as it finds a match, but
          # curl with throw an error 23 when that occurs.  Piping through a
          # program that reads the entire contents avoids this problem.
          # grepping unquietly first does this.
          command: |
            curl --silent 'http://127.0.0.1/dsa/'
            curl --silent 'http://127.0.0.1/dsa/api/v1/system/version'
            curl --silent 'http://127.0.0.1/dsa/' | grep '/dsa/static/built/plugins/large_image' | grep -q '/dsa/static/built/plugins/large_image' && echo 'correct references'
            curl --silent 'http://127.0.0.1/dsa/api/v1/system/version' | grep 'release' | grep -q 'release' && echo 'reports version'
            curl --silent 'http://127.0.0.1/dsa/static/built/plugins/large_image/extra/geojs.js' > output.js
            grep -q 'createRenderer' output.js && echo 'can reach geojs'
  test-proxy-common-5:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommon5docker
      - run:
          name: Install nginx
          command: |
            sudo apt-get update
            sudo apt-get install -y nginx
      - run:
          name: Start nginx
          command: |
            sudo cp .circleci/dsa_proxy.nginx /etc/nginx/sites-available/default
            sudo service nginx restart
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose -f docker-compose.yml -f ../../.circleci/docker-compose.proxy.yml up -d'
          working_directory: ./devops/ver5
      - run:
          name: "Wait for girder to be available"
          command: |
            for f in `seq 120`; do curl --silent 'http://127.0.0.1/dsa/api/v1/system/version' | tac | tac | grep -q 'release' && break; sleep 1; done
      - run:
          name: "Check that we can read from the api and static assets in the proxy path locations"
          # grep -q will close its connection as soon as it finds a match, but
          # curl with throw an error 23 when that occurs.  Piping through a
          # program that reads the entire contents avoids this problem.
          # grepping unquietly first does this.
          command: |
            curl --silent 'http://127.0.0.1/dsa/'
            curl --silent 'http://127.0.0.1/dsa/api/v1/system/version'
            curl --silent 'http://127.0.0.1/dsa/api/v1/plugin_static_files' | grep -q  'large_image' && echo 'correct references'
            curl --silent 'http://127.0.0.1/dsa/api/v1/system/version' | grep 'release' | grep -q 'release' && echo 'reports version'
            curl --silent 'http://127.0.0.1/dsa/plugin_static/large_image/extra/geojs.js' > output.js
            grep -q 'createRenderer' output.js && echo 'can reach geojs'
  test-girder-build-common:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommondocker
      - startcommon
      - run:
          name: Ensure that we can rebuild girder
          command: docker exec dsa-girder-1 bash -lc 'girder build'
  test-histomicsui-common:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    resource_class: large
    steps:
      - checkout
      - usecommondocker
      - startcommon
      - run:
          name: Ensure that we can run tests
          command: |
            docker exec dsa-girder-1 bash -lc 'PYTEST_NUMPROCESSES=4 tox -e lint,lintclient,py310,py313'
  test-histomicsui-common-5:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    resource_class: large
    steps:
      - checkout
      - usecommon5docker
      - startcommon5
      - run:
          name: Ensure that we can run tests
          # remove git stash when large-image-girder-5 is default
          command: |
            docker exec ver5-girder-1 bash -lc 'git stash; PYTEST_NUMPROCESSES=4 tox -e lint,lintclient,py310,py313'
  docker-compose:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Use Python 3.13
          command: |
            pyenv versions
            pyenv global 3.13
            pip --version
      - run:
          name: Check provisioning defaults match
          command: |
            pip install pyyaml
            python ./devops/dsa/provision.py --dry-run > /tmp/defaults.yaml
            python ./devops/dsa/provision.py --dry-run --no-defaults --yaml=devops/dsa/provision.yaml > /tmp/provfile.yaml
            diff /tmp/defaults.yaml /tmp/provfile.yaml && true
            if [[ $(diff /tmp/defaults.yaml /tmp/provfile.yaml | tail -n '+5') ]]; then false; fi
      - run:
          name: Capture current dependency commits
          command: |
            pip install requests
            python .circleci/check_updates.py --out=/tmp/last_build_commits.json
      - run:
          name: Run docker compose build
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose build girder'
          working_directory: ./devops/dsa
      - run:
          name: Rebuild with version information
          command: |
            export DSA_VERSIONS=$(docker run --rm -it --entrypoint bash dsarchive/dsa_common -c 'python -c "import datetime,importlib.metadata,json,sys;sys.stdout.write(json.dumps({k: datetime.datetime.utcnow().strftime(\"%Y-%m-%d\") if k == \"build_date\" else importlib.metadata.version(k).split(\"+\")[0] for k in [\"girder\",\"histomicsui\",\"large_image\",\"girder_worker\",\"girder_worker_utils\",\"girder_slicer_cli_web\",\"import_tracker\",\"build_date\"]}))"' | grep -o '{.*}')
            echo $DSA_VERSIONS
            DSA_USER=$(id -u):$(id -g) docker compose build girder
          working_directory: ./devops/dsa
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose up -d'
          working_directory: ./devops/dsa
      - run:
          name: Archive docker images
          command: |
            docker save -o dsa_common.tar dsarchive/dsa_common:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./dsa_common.tar
      - store_artifacts:
          path: ./dsa_common.tar
      - run:
          name: Update modules
          command: pip install -U pip requests
      - run:
          name: Install modules needed for testing
          command: pip install girder-client setuptools
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
            for f in `seq 120`; do if curl --silent 'http://127.0.0.1:8080/api/v1/folder?text=Slicer%20CLI%20Web%20Tasks' | grep 'Tasks'; then break; fi; sleep 1; done
      - run:
          name: Grant permissions to docker socket.
          # This is better done by adding the user in the docker container to the group, but that complicates the docker compose example.
          command: sudo chmod a+xwr /var/run/docker.sock
      - run:
          name: Test the instance
          command: python devops/dsa/utils/cli_test.py dsarchive/histomicstk:latest --user=admin --password=password --test
      - persist_to_workspace:
          root: /tmp
          paths:
            - last_build_commits.json
  docker-compose-minimal:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Use Python 3.13
          command: |
            pyenv versions
            pyenv global 3.13
            pip --version
      - run:
          name: Run docker compose up
          command: docker compose up --build -d
          working_directory: ./devops/minimal
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
  docker-compose-external-worker:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Use Python 3.13
          command: |
            pyenv versions
            pyenv global 3.13
            pip --version
      - run:
          name: Run docker compose up
          command: |
            bash -c 'DSA_USER=$(id -u):$(id -g) docker compose --profile server up --build -d'
            bash -c 'DSA_USER=$(id -u):$(id -g) docker compose --profile worker up --build -d'
          working_directory: ./devops/external-worker
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
  docker-compose-external-worker-5:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Use Python 3.13
          command: |
            pyenv versions
            pyenv global 3.13
            pip --version
      - run:
          name: Run docker compose up
          command: |
            bash -c 'DSA_USER=$(id -u):$(id -g) docker compose --profile server up --build -d'
            bash -c 'DSA_USER=$(id -u):$(id -g) docker compose --profile worker up --build -d'
          working_directory: ./devops/external-worker-5
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
  docker-compose-with-dive-volview:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Use Python 3.13
          command: |
            pyenv versions
            pyenv global 3.13
            pip --version
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose -f ../dsa/docker-compose.yml -f docker-compose.override.yml -p dsa-plus up --build -d'
          working_directory: ./devops/with-dive-volview
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
  docker-compose-5:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - run:
          name: Use Python 3.13
          command: |
            pyenv versions
            pyenv global 3.13
            pip --version
      - run:
          name: Run docker compose up
          command: bash -c 'DSA_USER=$(id -u):$(id -g) docker compose up --build -d'
          working_directory: ./devops/ver5
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 120`; do if curl --silent http://127.0.0.1:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
      - run:
          name: Archive docker images
          command: |
            docker save -o dsa_common_5.tar dsarchive/dsa_common_5:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./dsa_common_5.tar
      - store_artifacts:
          path: ./dsa_common_5.tar
  publish-docker-common:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommondocker
      - run:
          name: Publish images to Docker Hub
          command: |
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker push dsarchive/dsa_common:latest
              if [[ $CIRCLE_TAG =~ ^v.*$ ]]; then
              docker tag dsarchive/dsa_common:latest "dsarchive/dsa_common:$CIRCLE_TAG"
              docker push "dsarchive/dsa_common:$CIRCLE_TAG"
              fi
              export DATE_TAG=`date '+%Y%m%d'`
              docker tag dsarchive/dsa_common:latest "dsarchive/dsa_common:$DATE_TAG"
              docker push "dsarchive/dsa_common:$DATE_TAG"
      - run:
          name: Store successful build commit references
          command: |
            if [ $? -eq 0 ]; then
              # Docker push was successful, now save the commit hashes
              git checkout -b build-tracking origin/build-tracking || (git checkout --orphan build-tracking && git rm --cached -r .)
              cp /tmp/workspace/last_build_commits.json ./last_build_commits.json
              git config user.email "ci@circleci.com"
              git config user.name "CircleCI"
              git add last_build_commits.json
              git commit -m "Update successful build references [skip ci]" && git push -u https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git || true
            fi

  publish-docker-common-5:
    working_directory: ~/project
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - usecommon5docker
      - run:
          name: Publish images to Docker Hub
          command: |
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker push dsarchive/dsa_common_5:latest
              if [[ $CIRCLE_TAG =~ ^v.*$ ]]; then
              docker tag dsarchive/dsa_common_5:latest "dsarchive/dsa_common_5:$CIRCLE_TAG"
              docker push "dsarchive/dsa_common_5:$CIRCLE_TAG"
              fi
              export DATE_TAG=`date '+%Y%m%d'`
              docker tag dsarchive/dsa_common_5:latest "dsarchive/dsa_common_5:$DATE_TAG"
              docker push "dsarchive/dsa_common_5:$DATE_TAG"
  docs:
    docker:
      - image: cimg/ruby:3.3
    steps:
      - checkout
      - run:
          name: Bundle install
          command: |
            cd docs
            bundle install
            bundle update
      - run:
          name: Build docs
          command: |
            cd docs
            mkdir /tmp/artifacts
            bundle exec jekyll build -d /tmp/artifacts --baseurl /0/tmp/artifacts/
      - run:
          name: Test links
          command: |
            curl -OLJ https://bootstrap.pypa.io/get-pip.py
            python3 get-pip.py
            pip install linkchecker
            linkchecker /tmp/artifacts/index.html
      - store_artifacts:
          path: /tmp/artifacts
  scan-docker:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan the local image with trivy; fail on high or critical vulnerabilities
          command: trivy image --scanners vuln --input /tmp/workspace/dsa_common.tar --exit-code 1 --severity HIGH,CRITICAL --no-progress
      - run:
          name: Scan the local image with trivy; report low and medium vulnerabilities, but don't fail
          command: trivy image --scanners vuln image --input /tmp/workspace/dsa_common.tar --exit-code 0 --severity LOW,MEDIUM,UNKNOWN --no-progress
  scan-docker-5:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan the local image with trivy; fail on high or critical vulnerabilities
          command: trivy image --scanners vuln --input /tmp/workspace/dsa_common_5.tar --exit-code 1 --severity HIGH,CRITICAL --no-progress
      - run:
          name: Scan the local image with trivy; report low and medium vulnerabilities, but don't fail
          command: trivy image --scanners vuln image --input /tmp/workspace/dsa_common_5.tar --exit-code 0 --severity LOW,MEDIUM,UNKNOWN --no-progress
  check-for-updates:
    docker:
      - image: python:3.13-slim
    steps:
      - checkout
      - run:
          name: Check for updates in dependent repos
          command: |
            pip install requests
            python .circleci/check_updates.py --last=https://raw.githubusercontent.com/DigitalSlideArchive/digital_slide_archive/build-tracking/last_build_commits.json --trigger || true

workflows:
  version: 2
  ci:
    jobs:
      - test-cli-common:
          requires:
            - docker-compose
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-cli-common-5:
          requires:
            - docker-compose-5
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-proxy-common:
          requires:
            - docker-compose
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-proxy-common-5:
          requires:
            - docker-compose-5
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-girder-build-common:
          requires:
            - docker-compose
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-histomicsui-common:
          requires:
            - docker-compose
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - test-histomicsui-common-5:
          requires:
            - docker-compose-5
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose-minimal:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose-with-dive-volview:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose-5:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose-external-worker:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - docker-compose-external-worker-5:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
      - scan-docker:
          requires:
            - docker-compose
          filters:
            tags:
              only: /^v.*/
      - scan-docker-5:
          requires:
            - docker-compose-5
          filters:
            tags:
              only: /^v.*/
      - publish-docker-common:
          requires:
            - test-cli-common
            - test-girder-build-common
            - test-histomicsui-common
            - test-proxy-common
            - docker-compose-minimal
            - docker-compose-external-worker
            - docker-compose-with-dive-volview
            - scan-docker
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - master
      - publish-docker-common-5:
          requires:
            - test-cli-common-5
            - test-histomicsui-common-5
            - test-proxy-common-5
            # - docker-compose-minimal
            - docker-compose-external-worker-5
            # - docker-compose-with-dive-volview
            - scan-docker-5
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - master
      - docs:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - gh-pages
  # We want to run a build periodically to make sure it still works and to use
  # all dependent libraries.  To republish dockers sooner, a build can be rerun
  # manually.
  periodic:
    triggers:
      - schedule:
          # Run every morning at 7 a.m.
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - master
                - check-updates
    jobs:
      - check-for-updates
