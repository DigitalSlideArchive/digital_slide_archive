---
name: dsa5
services:
  girder:
    profiles:
      - server
    image: dsarchive/dsa_common_5
    build:
      context: ../..
      dockerfile: dsa5.Dockerfile
    # Instead of privileged mode, fuse can use:
    # devices:
    #   - /dev/fuse:/dev/fuse
    # security_opt:
    #   - apparmor:unconfined
    # cap_add:
    #   - SYS_ADMIN
    # but these may be somewhat host specific, so we default to privileged.  If
    # the docker daemon is being run with --no-new-privileges, fuse may not
    # work.
    # See also https://github.com/docker/for-linux/issues/321 for possible
    # methods to avoid both privileged mode and cap_add SYS_ADMIN.
    privileged: true
    # Set DSA_USER to a user id that is part of the docker group (e.g.,
    # `DSA_USER=$(id -u):$(id -g)`).  This makes files in assetstores and logs
    # owned by that user and provides permissions to manage docker
    environment:
      DSA_USER: ${DSA_USER:-}
      # Enable this to automatically use the provisioning yaml
      DSA_PROVISION_YAML: ${DSA_PROVISION_YAML:-/opt/digital_slide_archive/devops/dsa/provision.yaml}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-girder}:${RABBITMQ_PASS:-girder1234}@rabbitmq/
      CELERY_RESULT_BACKEND: rpc://${RABBITMQ_USER:-girder}:${RABBITMQ_PASS:-girder1234}@rabbitmq/
      GIRDER_MONGO_URI: mongodb://mongodb:27017/girder?socketTimeoutMS=3600000
      GIRDER_NOTIFICATION_REDIS_URL: redis://redis:6379
      GIRDER_SERVER_MODE: production
      GIRDER_SETTING_CORE_CACHE_ENABLED: true
      GIRDER_SETTING_CORE_HTTP_ONLY_COOKIES: true
      HISTOMICSUI_RESTRICT_DOWNLOADS: 100000
      LARGE_IMAGE_CACHE_BACKEND: redis
      LARGE_IMAGE_CACHE_REDIS_URL: redis:6379
      # LARGE_IMAGE_CACHE_REDIS_PASSWORD: ''
      LARGE_IMAGE_CACHE_TILESOURCE_MAXIMUM: 64
      # Mount options can be used to, for instance, add diskcache (e.g.,
      #  "-o diskcache,diskcache_size_limit=2147483648")
      DSA_GIRDER_MOUNT_OPTIONS: ${DSA_GIRDER_MOUNT_OPTIONS:-}
    restart: unless-stopped
    # Set DSA_PORT to expose the interface on another port (default 8080).
    ports:
      - "${DSA_PORT:-8080}:8080"
    volumes:
      # Needed to use slicer_cli_web to run docker containers
      - /var/run/docker.sock:/var/run/docker.sock
      # Default assetstore
      - ../ver5/assetstore:/assetstore
      # Location of provision.py
      - ../ver5/provision.py:/opt/digital_slide_archive/devops/dsa/provision.py
      - ../ver5/start_girder.sh:/opt/digital_slide_archive/devops/ver5/start_girder.sh
      # Add additional mounts here to get access to existing files on your
      # system.  Also add them to the worker container to reduce copying.
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    command: /opt/digital_slide_archive/devops/ver5/start_girder.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/system/version"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 30s
  mongodb:
    profiles:
      - server
    image: "mongo:latest"
    # Set DSA_USER to your user id (e.g., `DSA_USER=$(id -u):$(id -g)`)
    # so that database files are owned by yourself.
    user: ${DSA_USER:-PLEASE SET DSA_USER}
    restart: unless-stopped
    # Limiting maxConns reduces the amount of shared memory demanded by
    # mongo.  Remove this limit or increase the host vm.max_map_count value.
    command: --maxConns 1000
    volumes:
      # Location to store database files
      - ./db:/data/db
    # Uncomment to allow access to the database from outside of the docker
    # network.
    # ports:
    #   - "27017"
    logging:
      options:
        max-size: "10M"
        max-file: "5"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 30s
  redis:
    profiles:
      - server
    image: redis
    command: ["redis-server", "--maxmemory", "4096MB", "--maxmemory-policy", "allkeys-lru"]
    restart: unless-stopped
    logging:
      options:
        max-size: "10M"
        max-file: "5"
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 30s
  rabbitmq:
    profiles:
      - server
    image: "rabbitmq:latest"
    restart: unless-stopped
    # Allow access to rabbitmq from outside of the docker network
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER:-girder}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-girder1234}
    volumes:
      - ../ver5/rabbitmq.advanced.config:/etc/rabbitmq/advanced.config:ro
    logging:
      options:
        max-size: "10M"
        max-file: "5"
    command: "bash -c '(until rabbitmqctl await_startup; do sleep 1; done; rabbitmqctl add_user \"${RABBITMQ_USER:-girder}\" \"${RABBITMQ_PASS:-girder1234}\" 2>/dev/null ; rabbitmqctl set_permissions -p / \"${RABBITMQ_USER:-girder}\" \".*\" \".*\" \".*\") & rabbitmq-server'"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  logging:
    profiles:
      - server
    image: python:3.13-slim
    user: ${DSA_USER:-PLEASE SET DSA_USER}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs:/logs
      - ../ver5/start_dockerlog.py:/app/start_dockerlog.py
    init: true
    command: ["bash", "-c", "export PYTHONUSERBASE=/tmp && pip install --no-cache-dir --no-warn-script-location --user docker && python -u /app/start_dockerlog.py"]
    restart: unless-stopped
    depends_on:
      - girder
      - redis
      - mongodb
      - rabbitmq
    logging:
      options:
        max-size: "10M"
        max-file: "5"

  worker:
    profiles:
      - worker
    image: dsarchive/dsa_common_5
    build:
      context: ../..
      dockerfile: dsa5.Dockerfile
    # Set DSA_USER to a user id that is part of the docker group (e.g.,
    # `DSA_USER=$(id -u):$(id -g)`).  This provides permissions to manage
    # docker
    environment:
      DSA_USER: ${DSA_USER:-}
      DSA_WORKER_CONCURRENCY: ${DSA_WORKER_CONCURRENCY:-2}
      RABBITMQ_USER: ${RABBITMQ_USER:-girder}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-girder1234}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-girder}:${RABBITMQ_PASS:-girder1234}@rabbitmq/
      CELERY_RESULT_BACKEND: rpc://${RABBITMQ_USER:-girder}:${RABBITMQ_PASS:-girder1234}@rabbitmq/
      DSA_RABBITMQ_HOST: ${DSA_RABBITMQ_HOST:-rabbitmq}
      TMPDIR:
    restart: unless-stopped
    volumes:
      # Needed to use slicer_cli_web to run docker containers
      - /var/run/docker.sock:/var/run/docker.sock
      # Location of provision.py
      - ../ver5/provision.py:/opt/digital_slide_archive/devops/ver5/provision.py
      # Allow overriding the start command
      - ../ver5/start_worker.sh:/opt/digital_slide_archive/devops/ver5/start_worker.sh
      # Needed to allow transferring data to slicer_cli_web docker containers
      - ${TMPDIR:-/tmp}:${TMPDIR:-/tmp}
      # Add additional mounts here to get access to existing files on your
      # system if they have the same path as on the girder container.
    command: /opt/digital_slide_archive/devops/ver5/start_worker.sh
    logging:
      options:
        max-size: "10M"
        max-file: "5"
    healthcheck:
      test: ["CMD", "celery", "-b", "amqp://${DSA_RABBITMQ_HOST:-rabbitmq}:5672", "inspect", "ping"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 30s
