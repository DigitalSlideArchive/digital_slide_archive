---
# The provision script can take a yaml file with provision options

# This is a dictionary of command-line arguments for the provisioning script
# If force is True, set all settings even if they are already set.  This may
# also be a list of settings keys to force.  It does not change the admin user
# or the default assetstore if those already exist.  If False, settings are
# only added or modified if they do not exist or are the default value.
force: False
samples: False
clean-delete-locks: True
sample-collection: Samples
sample-folder: Images
# Set use-defaults to False to skip default settings
use-defaults: True
# Set mongo_compat to False to not automatically set the mongo feature
# compatibility version to the current server version.
mongo-compat: True
# A list of additional pip modules to install; if any are girder plugins with
# client-side code, also specify rebuild-client.
# pip:
#   - girder-oauth
#   - girder-ldap
# rebuild-client may be False, True (for production mode), or "development"
rebuild-client: False
# Run additional shell commands before start
# shell:
#   - ls
# Default admin user if there are no admin users
admin:
  login: admin
  password: password
  firstName: Admin
  lastName: Admin
  email: admin@nowhere.nil
  public: True
# Default assetstore if there are no assetstores
assetstore:
  method: createFilesystemAssetstore
  name: Assetstore
  root: /assetstore
# Any resources to ensure exist.  A model must be specified.  This creates the
# resource if there is no match for all specified values other than metadata
# and attrs.  A value of "resource:<path>" is converted to the resource
# document with that resource path.  "resourceid:<path>" is the string id for
# the resource path, "resourceobjid:<path>" is the Mongo object id for the
# resource path.  A <path> of "admin" uses the default admin user.  A <path> of
# the form "assetstore/<name>" references the named assetstore.
#   You can add metadata to a resource.  The default key is meta.  If
# metadata_update is False, metadata will not be set if any metadata
# already exists.
#   You can alter the core model of a resource using the attrs key.  If the
# resource already exists, this will only be applied if attrs_update is True.
resources:
  - model: collection
    name: Tasks
    creator: resource:admin
    public: True
  - model: folder
    parent: resource:collection/Tasks
    parentType: collection
    name: "Slicer CLI Web Tasks"
    creator: resource:admin
    public: True
    # metadata:
    #   sample_key: sample_value
    # metadata_key: meta
    # metadata_update: True
    # attrs:
    #   quota:
    #     preferredAssetstore: resource:assetstore/Assetstore
    # attrs_update: True
settings:
  worker.broker: "amqp://guest:guest@rabbitmq"
  worker.backend: "rpc://guest:guest@rabbitmq"
  worker.api_url: "http://localhost:8080/api/v1"
  worker.direct_path: True
  core.brand_name: "Digital Slide Archive"
  # core.http_only_cookies: True
  histomicsui.webroot_path: "histomics"
  histomicsui.alternate_webroot_path: "histomicstk"
  histomicsui.delete_annotations_after_ingest: True
  homepage.markdown: |-
    # Digital Slide Archive
    ---
    ## Bioinformatics Platform

    Welcome to the **Digital Slide Archive**.

    Developers who want to use the Girder REST API should check out the
    [interactive web API docs](api/v1).

    The [HistomicsUI](histomics) application is enabled.
  slicer_cli_web.task_folder: "resourceid:collection/Tasks/Slicer CLI Web Tasks"
# List slicer-cli-images to pull, if not present, and load
# slicer-cli-image:
#   - dsarchive/histomicstk:latest
# List slicer-cli-images to always pull, and load
slicer-cli-image-pull:
  # - dsarchive/histomicstk:latest
# The worker can specify parameters for provisioning
# worker-rabbitmq-host: girder:8080
worker-rabbitmq-user: guest
worker-rabbitmq-pass: guest
worker-config: /opt/girder_worker/girder_worker/worker.local.cfg
# These have precedence over the top level values
worker:
  # rabbitmq-host: girder:8080
  # rabbitmq-user: guest
  # rabbitmq-pass: guest
  # config: /opt/girder_worker/girder_worker/worker.local.cfg
  # Install additional pip packages in the worker
  # pip:
  #   - package_one
  # Run additional shell commands in the worker before start
  # shell:

shell:
 - rm -rf /opt/girder_worker /opt/slicer_cli_web
 - git clone --branch slurm https://github.com/girder/girder_worker.git /opt/girder_worker
 - git clone --branch slicer-cli-web-singularity https://github.com/girder/slicer_cli_web.git /opt/slicer_cli_web
 - cp /opt/worker.dist.cfg /opt/girder_worker/girder_worker/worker.dist.cfg
 - pip install -e /opt/girder_worker
 - pip install -e /opt/girder_worker/girder_worker/singularity
 - pip install -e /opt/girder_worker/girder_worker/slurm
 - pip install -e /opt/slicer_cli_web
 - pip install -e /opt/slicer_cli_web/slicer_cli_web/singularity
